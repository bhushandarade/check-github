name: Tag Version

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed

permissions:
  contents: write

jobs:
  create_tag:
    name: Create Tag
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all branches and tags

      # Step 2: Setup Git
      - name: Setup Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # Step 3: Get the latest tag
      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      # Step 4: Determine version type
      - name: Determine version type
        id: version_type
        run: |
          # Default to patch update
          VERSION_TYPE="patch"
          
          # Check the latest commit message for version type indicators
          if git log -1 --pretty=%B | grep -q "BREAKING CHANGE"; then
            VERSION_TYPE="major"
          elif git log -1 --pretty=%B | grep -q "feat:"; then
            VERSION_TYPE="minor"
          elif git log -1 --pretty=%B | grep -q "fix:"; then
            VERSION_TYPE="patch"
          fi

          echo "version_type=$VERSION_TYPE" >> $GITHUB_ENV
          echo "Determined version type: $VERSION_TYPE"

      # Step 5: Increment the version and create a new tag
      - name: Create new tag
        run: |
          LATEST_TAG=${{ env.LATEST_TAG }}
          VERSION_TYPE=${{ env.version_type }}

          # Extract version components from the latest tag
          MAJOR=$(echo $LATEST_TAG | cut -d'.' -f1 | sed 's/v//')
          MINOR=$(echo $LATEST_TAG | cut -d'.' -f2)
          PATCH=$(echo $LATEST_TAG | cut -d'.' -f3)

          # Increment the version based on VERSION_TYPE
          if [ "$VERSION_TYPE" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$VERSION_TYPE" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          # Create the new version tag
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "Creating new tag: $NEW_TAG"
          git tag $NEW_TAG
          git push origin $NEW_TAG

      # Step 6: Confirm the new tag was pushed
      - name: Confirm Tag Push
        run: |
          git fetch --tags
          echo "Latest tags after push:"
          git tag --list --sort=-v:refname | head -n 5
